# **What it does**: Synchronizes each of the github/docs-staging-X repositories with the latest build scripts, workflows, and other files from src/deployments/staging.
# **Why we have it**: We want to centralize build config in src/deployments/staging for use across multiple repos.
# **Who does it impact**: Docs engineering, and potentially content writers.

name: Sync Staging Repo Files

on:
  workflow_dispatch:
  push:
    branches: [main]
    paths:
      - 'src/deployments/staging/build-scripts/*.sh'
      - 'src/deployments/staging/.github/**'
      - 'src/deployments/staging/Dockerfile'
      - 'src/deployments/staging/.env.example'
      - 'src/deployments/staging/README.example.md'
      - 'src/deployments/staging/config/**'

permissions:
  contents: write

jobs:
  # Determine how many staging repos we have and generate a matrix with repo and index
  generate-matrix:
    if: github.repository == 'github/docs-internal'
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: Checkout source repository
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1
        with:
          fetch-depth: 1 # Only need latest commit for config.json

      - name: Read configuration
        id: read-config
        run: |
          sudo apt-get update && sudo apt-get install -y jq
          NUMBER_OF_REPOS=$(jq '.number_of_staging_repos' src/deployments/staging/config.json)
          if ! [[ "$NUMBER_OF_REPOS" =~ ^[0-9]+$ ]]; then
            echo "Invalid number_of_staging_repos in config.json: $NUMBER_OF_REPOS"
            exit 1
          fi
          echo "number_of_repos=$NUMBER_OF_REPOS" >> $GITHUB_OUTPUT

      - name: Generate repository list with indices
        id: generate-repos
        run: |
          NUMBER_OF_REPOS=${{ steps.read-config.outputs.number_of_repos }}
          repos=()
          for i in $(seq 0 $NUMBER_OF_REPOS); do
            repos+=("{\"repo\": \"github/docs-staging-$i\", \"index\": $i}")
          done
          json_repos=$(printf '%s\n' "${repos[@]}" | jq -s -c .)
          echo "repos=$json_repos" >> $GITHUB_OUTPUT

      - name: Set matrix output with repo and index
        id: set-matrix
        run: |
          repos=${{ steps.generate-repos.outputs.repos }}
          echo "matrix={\"include\": $repos}" >> $GITHUB_OUTPUT

      - uses: ./.github/actions/slack-alert
        if: ${{ failure() && github.event_name != 'workflow_dispatch' }}
        with:
          slack_channel_id: ${{ secrets.DOCS_ALERTS_SLACK_CHANNEL_ID }}
          slack_token: ${{ secrets.SLACK_DOCS_BOT_TOKEN }}

  sync:
    if: github.repository == 'github/docs-internal'
    needs: generate-matrix
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.generate-matrix.outputs.matrix) }}
    steps:
      - name: Checkout source repository
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1
        with:
          fetch-depth: 0

      - name: Checkout target repository
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1
        with:
          repository: ${{ matrix.repo }}
          token: ${{ secrets.DOCS_BOT_PAT_READPUBLICKEY }}
          path: target_repo
          fetch-depth: 0

      - name: Synchronize files to target repo
        run: |
          # Create necessary directories if they DNE
          mkdir -p target_repo/build-scripts
          mkdir -p target_repo/.github/workflows
          mkdir -p target_repo/config

          # Copy build scripts
          cp src/deployments/staging/build-scripts/*.sh target_repo/build-scripts/ || true

          # Copy .github directory
          cp -r src/deployments/staging/.github target_repo/

          # Copy config files
          cp -r src/deployments/staging/config/* target_repo/config/ || true

          # Overwrite Dockerfile
          cp src/deployments/staging/Dockerfile target_repo/Dockerfile

          # Conditional copy for .env if not present
          if [ ! -f target_repo/.env ]; then
            cp src/deployments/staging/.env.example target_repo/.env
          fi

          # Conditional copy for README.md if not present
          if [ ! -f target_repo/README.md ]; then
            cp src/deployments/staging/README.example.md target_repo/README.md
          fi

      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Replace template variables
        run: |
          # Determine which values to use based on the index
          INDEX=${{ matrix.index }}

          if [ "$INDEX" -eq 0 ]; then
            DOMAIN=$(jq -r '.server_domain_name.internal' src/deployments/staging/config.json)
            LOADBALANCER=$(jq -r '.load_balancer_type.internal' src/deployments/staging/config.json)
          elif [ "$INDEX" -eq 1 ]; then
            DOMAIN=$(jq -r '.server_domain_name.external' src/deployments/staging/config.json)
            LOADBALANCER=$(jq -r '.load_balancer_type.external' src/deployments/staging/config.json)
          else
            DOMAIN=$(jq -r '.server_domain_name["docs-staging-x"]' src/deployments/staging/config.json)
            LOADBALANCER=$(jq -r '.load_balancer_type.["docs-staging-x"]' src/deployments/staging/config.json)
            
            # Replace {{x}} in the domain variable with the current index
            DOMAIN=$(echo "$DOMAIN" | sed "s/{{x}}/$INDEX/g")
          fi

          # Perform replacements in target_repo files
          # Replace the server_domain_name and load_balancer_type
          find target_repo -type f -exec sed -i "s|{{server_domain_name}}|$DOMAIN|g" {} +
          find target_repo -type f -exec sed -i "s|{{load_balancer_type}}|$LOADBALANCER|g" {} +

          # If any files still contain {{x}}, replace them with the current index
          find target_repo -type f -exec sed -i "s/{{x}}/$INDEX/g" {} +

      - name: Commit and push changes
        run: |
          cd target_repo
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add .
          # If there are changes, commit and push
          if ! git diff --cached --quiet; then
            git commit -m "Synchronize files from source repository with index ${{ matrix.index }}"
            git push
          fi

      - uses: ./.github/actions/slack-alert
        if: ${{ failure() && github.event_name != 'workflow_dispatch' }}
        with:
          slack_channel_id: ${{ secrets.DOCS_ALERTS_SLACK_CHANNEL_ID }}
          slack_token: ${{ secrets.SLACK_DOCS_BOT_TOKEN }}
